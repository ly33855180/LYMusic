===========================
= 下载调度、限速、焦点等说明： =
===========================

0. 名词说明：

HolderType
    所有者类型，标识不同模块。
    比如下载、试听、缓存、离线等，每一个模块都有自己的所有者类型。
    
    FILE_HOLDER_TYPE_NONE     = 0,
    FILE_HOLDER_TYPE_LISTEN   = 1,                         ///<    试听
    FILE_HOLDER_TYPE_DOWNLOAD = 2,                         ///<    下载
    FILE_HOLDER_TYPE_CACHE    = 4,                         ///<    缓存
    FILE_HOLDER_TYPE_OFFLINE  = 8,                         ///<    离线
    FILE_HOLDER_TYPE_KTV      = 32                         ///<    ktv点播

下载队列：
    每一个 HolderType 有一条自己的队列。
    队列有允许同时下载的最大数量，超出此数量的任务需要“等待”；
    队列具有优先级值，优先级值低的需要等待高优先级值的队列为空时调度。

下载任务： 
    带有任务优先级值与实时任务属性标签。
    每一个holdertype添加的任务在其队列里根据任务优先级值排队，实时任务在本队列内具有抢占属性。

下载速度等级
    在下载引擎层使用下载速度等级进行下载管控，划分了四个下载速度优先级：
        不限速、快速、标准速度、慢速
    DOWN_SPEED_PRIORITY_ULTIMATE = 0,
    DOWN_SPEED_PRIORITY_FAST     = 1,
    DOWN_SPEED_PRIORITY_NORMAL   = 2,
    DOWN_SPEED_PRIORITY_SLOW     = 3

    上层holdertype对应限速等级：
        case FILE_HOLDER_TYPE_LISTEN:
        case FILE_HOLDER_TYPE_CACHE:
            retSpeed =  engine::DOWN_SPEED_PRIORITY_ULTIMATE;
            break;
        case FILE_HOLDER_TYPE_DOWNLOAD:
        case FILE_HOLDER_TYPE_KTV:
            retSpeed = engine::DOWN_SPEED_PRIORITY_FAST;
            break;
        case FILE_HOLDER_TYPE_OFFLINE:
            retSpeed = engine::DOWN_SPEED_PRIORITY_NORMAL;
            break;
        default:
            retSpeed = engine::DOWN_SPEED_PRIORITY_SLOW;
            break;

    限速效果：
        不限速的任务： 不限制速度，快慢取决于网络环境、源情况
        快速的任务：   能分配 2 倍于标准速度的任务
        标准速度的任务：大概平分(引擎可用带宽/N)，N随不同情况变化
        慢速的任务 ：  能分配 1/2 于标准速度的任务。

焦点
    可以设置一个holdertype为当前焦点，当前焦点唯一、排他。（也可以设置为NONE，表示下载引擎之外模块）
    引擎内模块获得当前焦点，速度等级提升为不限速，其他holdertype的下载任务自动降一级。
    引擎外模块获得当前焦点，引擎内所有下载任务的速度等级自动降一级。
    
实际有效带宽
    下载过程中，下载引擎会记录实际有效的下载速度。
    取一个“安全”的最大值，作为当前带宽的“有效带宽”。

引擎可用带宽
    “实际有效带宽”减去预留带宽，即为引擎可用带宽。

预留带宽
    获得焦点的同时可以申请预留带宽。
    引擎内模块设置的预留带宽不做真实预留。此时实际有效带宽==引擎可用带宽。
    引擎外模块设置时，非焦点任务（快速、标准与慢速三种任务）瓜分引擎可用带宽。


1. 调度规则：


总原则：
1、非抢占式、基于队列优先级、基于任务优先级
2、支持实时任务
3、支持焦点、预留带宽

   第一个维度：根据队列优先级值进行调度，高优先级值的队列优先被调度，只要高优先级值队列中仍然具有任务，低优先级值队列就不会被调度。
             队列优先级值相同的多个队列，并行调度，不会相互干扰。
   第二个维度：一个队列内部，各个任务按照其任务优先级值排队，高优先级值任务优先调度，同优先级值按照添加顺序调度。普通任务不会发生抢占。
                
   实时属性的任务：具有抢占特性、一次性属性
            在队列间优先级条件满足下，其在本队列中即时调度，如果队列最大并行数量达到限制，则将正在下载的其他任务转为等待。未下载完成的
            实时属性任务在暂停、失败、被其他任务抢占后实时属性退化，如果依旧在等待队列中，其作为最高优先级值排在等待第一位，如不在等待队列中退化为普通下载任务。

    焦点、预留带宽：
            焦点的占有体现在下载任务速度等级的变化，当焦点被抢夺或者被释放时，文件管理器更新全部下载中任务的速度等级，以便及时反映用户需求。
            

    文件管理器的运行时管理器为每个holdertype维护其下载队列，ios默认的每个队列最大并行下载数量为1个，下载队列的队列优先级值相等。
众多添加/插入的下载任务在各自下载队列里按照优先级值排序。

2. 测试说明：

    本模块根目录为KGFileMgr，根目录下detail/KGFileMgrDefs.h中宏开关 DEBUG_FILE_MGR_OUTPUT控制向控制台或文件输出日志。
    日志文件将输出到/Library/Cache/Logs/下。
    
    可能的测试点：
    1、下载、离线、试听中两个以上模块共同下载同一个文件，开始、停止、删除是否表现正常。
    2、众多模块共同下载时，调度是否正常，下载速度整体上是否正常。
    3、焦点被其他下载引擎外模块占有时，下载速度调整是否正常。

